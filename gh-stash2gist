#!/usr/bin/env bash
set -e

GISTS_FILES=""

function help() {
    cat <<EOF
Usage: gh stash2gist [--list] [--repo-list]

Pushes local stashes to gist.
-l|--list: List all stashes that have been pushed to a gist.
-r|--repo-list: List stashes relevant to local repository which have been pushed to a gist.
EOF

}

# Build unique stash description from sha1sum of stash content prefixed with "stash-<repo-name>-"
function build_stash_filename() {
    local stash_id="$1"

    local stash_sha1
    local stash_filename

    stash_sha1=$(git stash show -p "${stash_id}" | sha1sum | awk '{print $1}')
    stash_filename="${STASH_PREFIX}-${stash_sha1}.diff"

    echo "${stash_filename}"
}

# Check if stash has already been pushed to gist
function is_stash_pushed() {
    local stash_id="$1"
    local stash_filename

    stash_filename=$(build_stash_filename "${stash_id}")

    for gf in ${GISTS_FILES}; do
        if [ "${gf}" == "${stash_filename}" ]; then
            echo 1
            return
        fi
    done
    echo 0
}

function push_stashes() {
    local stashes
    local stash_filename
    local gist_desc

    stashes=$(git stash list | cut -d':' -f 1)
    if [ -z "${stashes}" ]; then
        echo "No stash to push to gist."
        return 1
    fi
    set +e
    GISTS_FILES=$(echo "${JSON_GISTS}" | jq -M -r '.[] | select(.public==false) | .files | .[].filename' | grep "${STASH_PREFIX}")
    set -e
    for s in ${stashes}; do
        ret=$(is_stash_pushed "${s}")
        if [ "${ret}" == "0" ]; then
            echo "Push stash ${s} to gist"
            stash_filename=$(build_stash_filename "${s}")
            gist_desc=$(git stash list | grep "${s}" | sed "s/${s}: //")
            git stash show -p "${s}" | gh gist create -f "${stash_filename}" -d "${gist_desc}"
        fi
    done
}

function list_all_stashes_gist() {
    echo "${JSON_GISTS}" | jq '.[] | select(.public==false) | select(.files[].filename|startswith("stash-")) | "\(.id) \(.description)"'
}

function list_repo_stashes_gist() {
    echo "${JSON_GISTS}" | jq ".[] | select(.public==false) | select(.files[].filename|startswith(\"stash-${REPO_NAME}\")) | \"\(.id) \(.description)\""
}

USERNAME=$(gh api user --jq '.login')
STASH_PREFIX="stash-${REPO_NAME}"

list=0
repo_list=0
push=1
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            help
            exit 0
            ;;
        -l|--list)
            list=1
            push=0
            ;;
        -r|--repo-list)
            repo_list=1
            push=0
            ;;
    esac
    shift
done

if [ ${push} -eq 1 ] || [ ${repo_list} -eq 1 ]; then
    # Check we are in a git respository
    git status > /dev/null
    REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")
fi

JSON_GISTS=$(gh api "/users/${USERNAME}/gists")
if [ ${push} -eq 1 ]; then
    push_stashes
fi

if [ ${list} -eq 1 ]; then
    list_all_stashes_gist
fi

if [ ${repo_list} -eq 1 ]; then
    list_repo_stashes_gist
fi
